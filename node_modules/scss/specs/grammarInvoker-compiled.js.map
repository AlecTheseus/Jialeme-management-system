{"version":3,"sources":["grammarInvoker.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,QAAQ,KAAR,CAAV;AAAA,IACI,KAAK,QAAQ,IAAR,CADT;AAAA,IAEI,QAAQ,QAAQ,OAAR,CAFZ;AAAA,IAGI,iBAAiB,KAHrB;;AAKA,IAAI,cAAc,SAAd,WAAc,CAAS,OAAT,EAAkB;AAClC,SAAO,QAAQ,KAAR,CAAc,CAAd,EAAiB,OAAjB,CAAyB,MAAzB,EAAiC,IAAjC,CAAP;AACD,CAFD;;AAIA,IAAI,eAAe,SAAf,YAAe,CAAS,iBAAT,EAA4B;AAC7C,MAAG,CAAC,cAAJ,EAAoB;AAClB,qBAAiB,IAAjB;;AAEA,OAAG,QAAH,CAAY,YAAY,sCAAxB,EAAgE,MAAhE,EAAwE,UAAS,GAAT,EAAc,QAAd,EAAwB;AAC9F,UAAG,GAAH,EAAQ;AACN,0BAAkB,SAAlB,CAA4B,GAA5B;AACD,OAFD,MAEO;AACL,cAAM,YAAN,CAAmB,YAAY,QAAZ,CAAnB,EAA0C,kBAAkB,SAA5D;AACD;AACD,uBAAiB,KAAjB;AACD,KAPD;AAQD;AACF,CAbD;;AAeA,IAAI,oBAAqB,YAAW;AAClC,MAAI,aAAJ;AAAA,MACI,SADJ;AAAA,MAEI,kBAAkB,EAFtB;AAAA,MAGI,OAAO,EAHX;;AAKA,OAAK,SAAL,GAAiB,UAAS,GAAT,EAAc,MAAd,EAAsB;AACrC,gBAAY,GAAZ;AACA,oBAAgB,MAAhB;AACA,oBAAgB,OAAhB,CAAwB,UAAS,QAAT,EAAmB;AACzC,eAAS,SAAT,EAAoB,aAApB;AACD,KAFD;AAGA,sBAAkB,EAAlB;AACD,GAPD;;AASA,OAAK,WAAL,GAAmB,UAAS,QAAT,EAAmB;AACpC,QAAG,aAAa,aAAhB,EAA+B;AAC7B,eAAS,SAAT,EAAoB,aAApB;AACD,KAFD,MAEO;AACL,sBAAgB,IAAhB,CAAqB,QAArB;AACA,mBAAa,IAAb;AACD;AACF,GAPD;;AASA,OAAK,KAAL,GAAa,YAAW;AACtB,oBAAgB,IAAhB;AACD,GAFD;;AAIA,SAAO,IAAP;AACD,CA7BuB,EAAxB;;AA+BA,IAAI,QAAQ,SAAR,KAAQ,CAAS,QAAT,EAAmB,QAAnB,EAA6B;AACvC,oBAAkB,WAAlB,CAA8B,UAAS,GAAT,EAAc,MAAd,EAAsB;AAClD,QAAG,GAAH,EAAQ;AACN,eAAS,GAAT;AACD,KAFD,MAEO;AACL,aAAO,KAAP,CAAa,QAAb,EAAuB,iBAAvB,EAA0C,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC3D,YAAG,GAAH,EAAQ;AACN,mBAAS,GAAT;AACD,SAFD,MAEO;AAEL,mBAAS,IAAT,EAAe,IAAI,IAAJ,CAAS,EAAT,CAAf;AACD;AACF,OAPD;AAQD;AACF,GAbD;AAcD,CAfD;;AAkBA,OAAO,OAAP,CAAe,KAAf,GAAuB,KAAvB;AACA,OAAO,OAAP,CAAe,KAAf,GAAuB,kBAAkB,KAAzC;AACA,IAAI,OAAO,OAAX;AACA,QAAQ,GAAR,CAAY,IAAZ;AACA,MAAM,IAAN,EAAY,UAAS,GAAT,EAAc,OAAd,EAAuB;AACjC,MAAG,GAAH,EAAQ;AACN,YAAQ,GAAR,CAAY,GAAZ;AACD;AACD,UAAQ,GAAR,CAAY,OAAZ;AACD,CALD","file":"grammarInvoker-compiled.js","sourcesContent":["var sys = require('sys'),\n    fs = require('fs'),\n    ometa = require('ometa'),\n    creatingParser = false;\n\nvar fixReadFile = function(rawFile) {\n  return rawFile.slice(1).replace(/\\\\n/g, '\\n');\n};\n\nvar createParser = function(parserInitializer) {\n  if(!creatingParser) {\n    creatingParser = true;\n    //fs.readFile(__dirname + '/../src/cssSelector.ometa', 'utf8', function(err, contents) {\n    fs.readFile(__dirname + '/../../ometa-js/newLineGrammar.ometa', 'utf8', function(err, contents) {\n      if(err) {\n        parserInitializer.setParser(err);\n      } else {\n        ometa.createParser(fixReadFile(contents), parserInitializer.setParser);\n      }\n      creatingParser = false;\n    });\n  }\n};\n\nvar parserInitializer = (function() {\n  var createdParser,\n      parserErr,\n      queuedCallbacks = [],\n      that = {};\n\n  that.setParser = function(err, parser) {\n    parserErr = err;\n    createdParser = parser;\n    queuedCallbacks.forEach(function(callback) {\n      callback(parserErr, createdParser);\n    });\n    queuedCallbacks = [];\n  };\n\n  that.addCallback = function(callback) {\n    if(parserErr || createdParser) {\n      callback(parserErr, createdParser);\n    } else {\n      queuedCallbacks.push(callback);\n      createParser(that);\n    }\n  };\n\n  that.reset = function() {\n    createdParser = null;\n  };\n\n  return that;\n})();\n\nvar parse = function(selector, callback) {\n  parserInitializer.addCallback(function(err, parser) {\n    if(err) {\n      callback(err);\n    } else {\n      parser.parse(selector, 'selectors_group', function(err, css) {\n        if(err) {\n          callback(err);\n        } else {\n          //callback(null, css.toString());\n          callback(null, css.join(''));\n        }\n      });\n    }\n  });\n};\n\n\nmodule.exports.parse = parse;\nmodule.exports.reset = parserInitializer.reset;\nvar ssss = 'a,\\nb';\nconsole.log(ssss);\nparse(ssss, function(err, shiznit) {\n  if(err) {\n    console.log(err);\n  }\n  console.log(shiznit);\n});\n"]}