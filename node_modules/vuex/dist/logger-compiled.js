import _Object$keys from 'babel-runtime/core-js/object/keys';
import _typeof from 'babel-runtime/helpers/typeof';
(function (global, factory) {
  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.createVuexLogger = factory();
})(this, function () {
  'use strict';

  function find(list, f) {
    return list.filter(f)[0];
  }

  function deepCopy(obj, cache) {
    if (cache === void 0) cache = [];

    if (obj === null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
      return obj;
    }

    var hit = find(cache, function (c) {
      return c.original === obj;
    });
    if (hit) {
      return hit.copy;
    }

    var copy = Array.isArray(obj) ? [] : {};

    cache.push({
      original: obj,
      copy: copy
    });

    _Object$keys(obj).forEach(function (key) {
      copy[key] = deepCopy(obj[key], cache);
    });

    return copy;
  }

  function createLogger(ref) {
    if (ref === void 0) ref = {};
    var collapsed = ref.collapsed;if (collapsed === void 0) collapsed = true;
    var transformer = ref.transformer;if (transformer === void 0) transformer = function transformer(state) {
      return state;
    };
    var mutationTransformer = ref.mutationTransformer;if (mutationTransformer === void 0) mutationTransformer = function mutationTransformer(mut) {
      return mut;
    };

    return function (store) {
      var prevState = deepCopy(store.state);

      store.subscribe(function (mutation, state) {
        if (typeof console === 'undefined') {
          return;
        }
        var nextState = deepCopy(state);
        var time = new Date();
        var formattedTime = " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
        var formattedMutation = mutationTransformer(mutation);
        var message = "mutation " + mutation.type + formattedTime;
        var startMessage = collapsed ? console.groupCollapsed : console.group;

        try {
          startMessage.call(console, message);
        } catch (e) {
          console.log(message);
        }

        console.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));
        console.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);
        console.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));

        try {
          console.groupEnd();
        } catch (e) {
          console.log('—— log end ——');
        }

        prevState = nextState;
      });
    };
  }

  function repeat(str, times) {
    return new Array(times + 1).join(str);
  }

  function pad(num, maxLength) {
    return repeat('0', maxLength - num.toString().length) + num;
  }

  return createLogger;
});

//# sourceMappingURL=logger-compiled.js.map