{"version":3,"sources":["logger.js"],"names":[],"mappings":";;AAEA,SAAS,QAAT,QAAyB,SAAzB;;AAEA,eAAe,SAAS,YAAT,GAKP;AAAA,iFAAJ,EAAI;AAAA,4BAJN,SAIM;AAAA,MAJN,SAIM,kCAJM,IAIN;AAAA,yBAHN,MAGM;AAAA,MAHN,MAGM,+BAHG,UAAC,QAAD,EAAW,WAAX,EAAwB,UAAxB;AAAA,WAAuC,IAAvC;AAAA,GAGH;AAAA,8BAFN,WAEM;AAAA,MAFN,WAEM,oCAFQ;AAAA,WAAS,KAAT;AAAA,GAER;AAAA,mCADN,mBACM;AAAA,MADN,mBACM,yCADgB;AAAA,WAAO,GAAP;AAAA,GAChB;;AACN,SAAO,iBAAS;AACd,QAAI,YAAY,SAAS,MAAM,KAAf,CAAhB;;AAEA,UAAM,SAAN,CAAgB,UAAC,QAAD,EAAW,KAAX,EAAqB;AACnC,UAAI,OAAO,OAAP,KAAmB,WAAvB,EAAoC;AAClC;AACD;AACD,UAAM,YAAY,SAAS,KAAT,CAAlB;;AAEA,UAAI,OAAO,QAAP,EAAiB,SAAjB,EAA4B,SAA5B,CAAJ,EAA4C;AAC1C,YAAM,OAAO,IAAI,IAAJ,EAAb;AACA,YAAM,wBAAsB,IAAI,KAAK,QAAL,EAAJ,EAAqB,CAArB,CAAtB,SAAiD,IAAI,KAAK,UAAL,EAAJ,EAAuB,CAAvB,CAAjD,SAA8E,IAAI,KAAK,UAAL,EAAJ,EAAuB,CAAvB,CAA9E,SAA2G,IAAI,KAAK,eAAL,EAAJ,EAA4B,CAA5B,CAAjH;AACA,YAAM,oBAAoB,oBAAoB,QAApB,CAA1B;AACA,YAAM,wBAAsB,SAAS,IAA/B,GAAsC,aAA5C;AACA,YAAM,eAAe,YACjB,QAAQ,cADS,GAEjB,QAAQ,KAFZ;;AAKA,YAAI;AACF,uBAAa,IAAb,CAAkB,OAAlB,EAA2B,OAA3B;AACD,SAFD,CAEE,OAAO,CAAP,EAAU;AACV,kBAAQ,GAAR,CAAY,OAAZ;AACD;;AAED,gBAAQ,GAAR,CAAY,eAAZ,EAA6B,mCAA7B,EAAkE,YAAY,SAAZ,CAAlE;AACA,gBAAQ,GAAR,CAAY,aAAZ,EAA2B,mCAA3B,EAAgE,iBAAhE;AACA,gBAAQ,GAAR,CAAY,eAAZ,EAA6B,mCAA7B,EAAkE,YAAY,SAAZ,CAAlE;;AAEA,YAAI;AACF,kBAAQ,QAAR;AACD,SAFD,CAEE,OAAO,CAAP,EAAU;AACV,kBAAQ,GAAR,CAAY,eAAZ;AACD;AACF;;AAED,kBAAY,SAAZ;AACD,KAlCD;AAmCD,GAtCD;AAuCD;;AAED,SAAS,MAAT,CAAiB,GAAjB,EAAsB,KAAtB,EAA6B;AAC3B,SAAQ,IAAI,KAAJ,CAAU,QAAQ,CAAlB,CAAD,CAAuB,IAAvB,CAA4B,GAA5B,CAAP;AACD;;AAED,SAAS,GAAT,CAAc,GAAd,EAAmB,SAAnB,EAA8B;AAC5B,SAAO,OAAO,GAAP,EAAY,YAAY,IAAI,QAAJ,GAAe,MAAvC,IAAiD,GAAxD;AACD","file":"logger-compiled.js","sourcesContent":["// Credits: borrowed code from fcomb/redux-logger\n\nimport { deepCopy } from '../util'\n\nexport default function createLogger ({\n  collapsed = true,\n  filter = (mutation, stateBefore, stateAfter) => true,\n  transformer = state => state,\n  mutationTransformer = mut => mut\n} = {}) {\n  return store => {\n    let prevState = deepCopy(store.state)\n\n    store.subscribe((mutation, state) => {\n      if (typeof console === 'undefined') {\n        return\n      }\n      const nextState = deepCopy(state)\n\n      if (filter(mutation, prevState, nextState)) {\n        const time = new Date()\n        const formattedTime = ` @ ${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(time.getSeconds(), 2)}.${pad(time.getMilliseconds(), 3)}`\n        const formattedMutation = mutationTransformer(mutation)\n        const message = `mutation ${mutation.type}${formattedTime}`\n        const startMessage = collapsed\n          ? console.groupCollapsed\n          : console.group\n\n        // render\n        try {\n          startMessage.call(console, message)\n        } catch (e) {\n          console.log(message)\n        }\n\n        console.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState))\n        console.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation)\n        console.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState))\n\n        try {\n          console.groupEnd()\n        } catch (e) {\n          console.log('—— log end ——')\n        }\n      }\n\n      prevState = nextState\n    })\n  }\n}\n\nfunction repeat (str, times) {\n  return (new Array(times + 1)).join(str)\n}\n\nfunction pad (num, maxLength) {\n  return repeat('0', maxLength - num.toString().length) + num\n}\n"]}